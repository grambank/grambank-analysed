# Determine this makefile's path.
THIS_MAKEFILE := $(lastword $(MAKEFILE_LIST))

.PHONY: all clean data pca help pca_process
.DEFAULT_GOAL := help

## Make everything.
all:
	 requirements.log data pca get_unusualness predict_unusualness sp_models sensitivity_testing phylo_signal_per_feature endangerment_analysis test

# runs almost all analysis from the release paper, excluding the analysis that takes a long time and/or more computational resources than a regular domestic computer tends to have (the BRMS-analysis for predicting unusualness score is best run on a cluster and the INLA analysis of the spatiophylogenetic modelling takes a long time)
almost_all_fast: requirements.log data pca get_unusualness phylo_signal_per_feature endangerment_analysis

## clean 
clean:
	rm -rf PCA *.log *.pdf *.tiff *.png *.tsv GB_wide/ spatiophylogenetic_modelling/results spatiophylogenetic_modelling/processed_data spatiophylogenetic_modelling/figures non_GB_datasets/ coverage_plots unusualness/plots unusualness/tables phylosig/ Bound_morph/
	@echo "## Removed all the dirs and files which are generated by the scripts. ##"
	
#step 0
## Check and install dependencies if needed.
requirements.log:
	@echo "# Installing and loading all the necessary R-packages. #"
	Rscript requirements.R | tee $@
 
#step 1
## Fetch data from grambank-cldf into required formats for plotting.
data:
	@echo "# Preparing the dataset (including imputation and pruning of global tree. #"
	@mkdir non_GB_datasets
	@mkdir coverage_plots
	@mkdir GB_wide
	@$(MAKE) -f $(THIS_MAKEFILE) non_GB_datasets/glottolog-cldf_wide_df.tsv
	@$(MAKE) -f $(THIS_MAKEFILE) GB_wide/GB_wide_strict.tsv
	@$(MAKE) -f $(THIS_MAKEFILE) GB_wide/GB_wide_binarized.tsv
	@$(MAKE) -f $(THIS_MAKEFILE) GB_wide/GB_wide_imputed_binarized.tsv
	@$(MAKE) -f $(THIS_MAKEFILE) coverage_plots/WALS_GB_coverage_overlay.png
	@$(MAKE) -f $(THIS_MAKEFILE) coverage_plots/coverage_macroarea.png
	@$(MAKE) -f $(THIS_MAKEFILE) pruning_jagertree

non_GB_datasets/glottolog-cldf_wide_df.tsv:
	@echo Fetching Glottolog language table. Note: this script requires internet access.
	Rscript make_glottolog-cldf_table.R

GB_wide/GB_wide_strict.tsv:
	@echo Making the GB data wide and merging dialects
	Rscript make_wide.R

GB_wide/GB_wide_binarized.tsv:
	@echo Binarising the GB data.
	Rscript make_wide_binarized.R

GB_wide/GB_wide_imputed_binarized.tsv:
	@echo Imputing missing values. This will most likely take a few minutes.
	Rscript impute_missing_values.R | tee impute_missing_values.log
	
coverage_plots/WALS_GB_coverage_overlay.png:
	@echo Making plot for comparing GB and WALS. Note: this script requires internet access.
	Rscript compare_coverage_WALS.R

coverage_plots/coverage_macroarea.png:
	@echo Making plots for coverage per macroarea.
	Rscript coverage_bar_plots.R

pruning_jagertree:
	mkdir -p spatiophylogenetic_modelling/processed_data
	RScript spatiophylogenetic_modelling/processing/pruning_jagertree.R

#step 2
## PCA analysis and plots.
pca:
	@echo "## Running PCA analysis and generating plots. ##"
	mkdir -p PCA
	@$(MAKE) -f $(THIS_MAKEFILE) PCA/PCA_df.tsv
	@$(MAKE) -f $(THIS_MAKEFILE) PCA/PCA_contributions_PCA1_PCA2.png
	@$(MAKE) -f $(THIS_MAKEFILE) PCA/PCA_RGB_worldmap.png
	@$(MAKE) -f $(THIS_MAKEFILE) PCA/PCA_macroarea.png
	@$(MAKE) -f $(THIS_MAKEFILE) theoretical

PCA/PCA_df.tsv:
	Rscript PCA.R

PCA/PCA_contributions_PCA1_PCA2.png: 
	Rscript PCA_plot_contributions.R

PCA/PCA_RGB_worldmap.png: 
	Rscript PCA_plot_worldmaps.R

PCA/PCA_macroarea.png: 
	Rscript PCA_plot_scatter_plots.R

## Comparing PCA to theoretical scores
theoretical:
	@echo "# Comparing PCA to theoretical scores. #"
	mkdir -p Bound_morph
	Rscript bound_morph.R
	Rscript compare_PCA_loadings_to_theory_scores.R

#step 3
## Unusualness language analysis and generate plots.
get_unusualness:
	@echo "# Calculating unsualness scores and making plots. Note: these scripts requires internet access.#"
	mkdir -p unusualness/plots
	mkdir -p unusualness/tables
	Rscript unusualness/processing/assigning_AUTOTYP_areas.R
	Rscript unusualness/analysis/unusualness_get_lg_score.R
	
#step 4
## Phylogenetic signal per feature.
phylo_signal_per_feature:
	@echo "## Running analysis of phylogenetic signal per feature. ##"
	mkdir -p phylosig
	Rscript phylo_signal_features_d_stat.R

#step 5
## Run endangerment and structural dissimilarity
endangerment_analysis:
	@echo "## Running analysis of endangerment and structural dissimilarity. ##"
	Rscript diversity_endangerment.R

#step 6
## INLA
INLA: data pca sp_models sensitivity_testing

## Phylo-spatial modelling
sp_models: PCA/PCA_language_values.tsv
	@echo "## Running spatiophylogenetic modelling with INLA on the first three components. ##"
	@echo "If INLA isn't installed it will be installed."
	@echo Strap-in, these models take a while!
	mkdir -p spatiophylogenetic_modelling/results
	mkdir -p spatiophylogenetic_modelling/figures
	Rscript spatiophylogenetic_modelling/analysis/spatiophylogenetic_jaegermodel.R
	Rscript spatiophylogenetic_modelling/analysis/plot_spatiophylogeneticmodels.R

## Sensitivity testing of INLA.
sensitivity_testing:
	@echo "## Running sensitivity testing of INLA. ##"
	Rscript spatiophylogenetic_modelling/analysis/spatial_parameters.R
	Rscript spatiophylogenetic_modelling/analysis/variogram.R
	Rscript spatiophylogenetic_modelling/analysis/waic_test.R
	Rscript spatiophylogenetic_modelling/analysis/detect_coderbias.R

#step 7
## BRMS-analysis of unsualness scores
predict_unusualness: 
	@echo "## Running BRMS-analysis of unsualness scores (cluster recommended). #"
	Rscript unusualness/analysis/predict_unusualness.R

## Test functions
test:
	Rscript -e 'testthat::test_dir("./tests", reporter="summary")'

## Display help
help:
	@echo "$$(tput bold)Available commands:$$(tput sgr0)"
	@echo
	@sed -n -e "/^## / { \
		h; \
		s/.*//; \
		:doc" \
		-e "H; \
		n; \
		s/^## //; \
		t doc" \
		-e "s/:.*//; \
		G; \
		s/\\n## /---/; \
		s/\\n/ /g; \
		p; \
	}" ${MAKEFILE_LIST} \
	| LC_ALL='C' sort --ignore-case \
	| awk -F '---' \
		-v ncol=$$(tput cols) \
		-v indent=19 \
		-v col_on="$$(tput setaf 6)" \
		-v col_off="$$(tput sgr0)" \
	'{ \
		printf "%s%*s%s ", col_on, -indent, $$1, col_off; \
		n = split($$2, words, " "); \
		line_length = ncol - indent; \
		for (i = 1; i <= n; i++) { \
			line_length -= length(words[i]) + 1; \
			if (line_length <= 0) { \
				line_length = ncol - indent - length(words[i]) - 1; \
				printf "\n%*s ", -indent, " "; \
			} \
			printf "%s ", words[i]; \
		} \
		printf "\n"; \
	}' \
	| more $(shell test $(shell uname) == Darwin && echo '--no-init --raw-control-chars')

